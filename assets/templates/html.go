// Code generated by go-bindata.
// sources:
// templates/html/map.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlMapHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x4b\x6f\xe3\x36\x10\x3e\x37\xbf\x82\x55\xd1\x2a\x0b\x58\x62\x9c\x60\x8b\x42\x91\x0c\x14\x3d\xb6\xdb\x3d\x74\xd1\x4b\x10\x18\x23\x69\x22\x11\x11\x1f\x25\x47\xb2\x65\x55\xff\x7d\x41\xf9\x11\xbf\x92\x39\xd8\x9c\x19\xf2\x1b\x7e\xc3\x8f\xd4\x30\xb0\x12\x5f\x84\x42\x16\x48\x30\x01\x1b\xc7\x9b\xf4\xc7\x52\x17\xd4\x1b\x64\x35\xc9\x66\x71\x93\xfa\x3f\xd6\x80\xaa\xb2\x00\x55\xd4\xba\x60\x71\xc3\x58\x5a\x23\x94\x7e\xc0\x58\x2a\x91\x80\x15\x35\x58\x87\x94\x05\x2d\xbd\x44\xbf\x05\xc7\xa9\x9a\xc8\x44\xf8\x5f\x2b\xba\x2c\xf8\x43\x2b\x42\x45\xd1\xb7\xde\x60\xc0\x8a\xad\x97\x05\x84\x6b\xe2\xbe\xd0\xe3\x01\xe8\x12\x47\x81\xc4\x2c\xe8\x04\xae\x8c\xb6\x74\xb4\x7a\x25\x4a\xaa\xb3\x12\x3b\x51\x60\x34\x39\x33\x26\x94\x20\x01\x4d\xe4\x0a\x68\x30\x9b\xc7\x77\x33\x26\x61\x2d\x64\x2b\x8f\x43\xad\x43\x3b\xf9\x90\x37\x98\x29\xbd\xaf\x47\x82\x1a\x5c\x7c\x01\x93\xf2\xed\x70\x1b\x76\xd4\xef\xc7\xde\x72\x5d\xf6\x6c\x38\xb8\xde\x24\xd8\x4a\xa8\x84\xdd\x99\xf5\xe3\x49\x22\xd7\xb6\x44\x7b\x25\x61\xa0\x2c\x85\xaa\xce\x32\xe3\xcd\x61\xf8\x93\x04\x73\x56\xa5\x46\x51\xd5\x94\xb0\xf9\xdd\xdd\xcf\xa7\x68\x13\xfb\x6b\x09\xa3\x9d\x20\xa1\x55\xc2\x20\x77\xba\x69\x09\x2f\x8a\xa5\xfc\xc0\x2f\xe5\xdb\xf3\xf5\x43\xcf\x72\xc7\xbf\x14\x1d\x13\x65\x36\x69\x65\x91\xf2\x52\x74\x8b\xdd\x52\x57\x58\x61\x68\xe7\xfd\xd0\x81\x65\x60\xc4\xf2\x15\x7b\x96\xb1\x52\x17\xad\x44\x45\xb1\x47\x8a\x2b\xa4\xdf\x89\xac\xc8\x5b\xc2\xdb\xa0\x04\x82\x48\xe1\x9a\x36\xa8\x22\x30\x22\x7a\xc5\x3e\xf8\xf4\xf8\xc6\xde\x43\xf9\x06\x64\xec\xaf\xf8\xef\xed\xbc\x58\x82\xb9\x0d\x25\x98\x70\xc6\x06\x30\xe2\x4f\xec\x93\x7d\xb9\x19\xec\xb0\x27\xaa\x61\x0a\xac\xb6\xf8\x92\x05\x5e\x83\x2e\xe1\xbc\x12\x54\xb7\x79\x5c\x68\xc9\x09\x54\x65\x41\xba\x80\x11\xd8\xca\x4b\x77\x99\x37\xa0\x5e\x83\xc5\xb7\x6d\x26\xe5\xb0\x60\xff\xb3\x13\x8c\x84\xf3\xd5\x6a\x15\x6b\x83\xca\x91\x45\x24\x09\x26\xd6\xb6\xe2\x85\x36\xbd\xf5\xa7\x72\x09\xf7\x8b\xcf\x3d\xb2\xaf\x06\xd5\x3f\xd3\x9a\x2f\x60\x26\xf1\x4e\x1b\xd5\xd6\x5d\x2b\xe4\x76\x95\x76\xbd\x99\x6a\x5c\x42\xef\x3a\xe2\x01\xc2\xd9\xc9\x79\xef\xd8\x7d\x35\xbe\x13\x2e\x39\x13\x90\x37\x57\xa0\xc2\x6b\x09\x6f\x42\xfa\x3b\x96\xb0\xa7\xab\x59\x6f\xe1\xbe\x81\xdc\xe2\x8b\x68\x9a\x68\x12\x4f\xbc\x11\xe6\x6c\x27\x7b\x7b\xbe\x1e\x76\xba\xb5\x05\x5e\xdd\xe1\xde\x24\x98\x0d\xaa\x8f\x66\x78\x6b\x6d\x93\xb0\x70\xdf\xbb\xc1\x8d\x31\x89\x06\x4f\x1a\xe8\x03\x1b\x54\xbc\xc3\x82\xb4\xe5\xdd\x9c\x7f\x9e\xdf\x73\x68\x1a\x3e\x6c\x46\x3e\xac\x47\x3e\xf4\x63\x2c\x3b\x7a\x87\xc2\x51\xa9\xa5\x6b\xf3\x52\x4b\x10\xbe\xb9\x4f\x21\x84\x33\x16\xe6\xfe\xa7\xf0\x3f\x65\xf8\x0e\xdb\x63\x04\x03\x5e\x7e\xc9\xa4\x61\xaf\xdd\x83\x88\xc7\x8f\xd7\x7a\x16\x4b\x27\x36\x98\xb0\xcf\xf3\xfb\x8f\xe7\x4a\x58\x2f\x37\x5a\xcb\x84\xcd\x7f\x7d\x77\xe2\x78\x35\x73\x19\x3d\x8d\xbc\x79\xe3\xa7\xb7\xb7\xc4\xdf\x07\x87\xf4\xaf\xc0\xd5\xed\xd3\xc3\x83\x7f\x64\xa3\xf9\x7d\xfc\xf0\x3c\x63\xf7\x47\xd3\xde\x2e\x73\x0d\xae\xbe\x1d\x24\x98\xc4\xaf\x1d\xf7\x77\x3f\xe5\x47\x4f\x4a\xca\xb7\x8f\x50\xca\xb7\xdf\xa4\x61\x60\xa8\x4a\xff\xb5\xfa\x1e\x00\x00\xff\xff\x41\xf4\xe8\x6b\xc1\x06\x00\x00")

func templatesHtmlMapHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlMapHtml,
		"templates/html/map.html",
	)
}

func templatesHtmlMapHtml() (*asset, error) {
	bytes, err := templatesHtmlMapHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/map.html", size: 1729, mode: os.FileMode(420), modTime: time.Unix(1567115651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/map.html": templatesHtmlMapHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"map.html": &bintree{templatesHtmlMapHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
